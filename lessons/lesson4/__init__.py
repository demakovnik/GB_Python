# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

from functools import reduce
from itertools import cycle, count


def next_more_than_previous(numbers):
    li = list(numbers)
    return [li[i] for i in range(1, len(li)) if li[i - 1] < li[i]]


# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
# Подсказка: используйте функцию range() и генератор.

def multiples():
    return [i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]


# 4. Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел,
# соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания
# обязательно используйте генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

def uniques(numbers):
    li = list(numbers)
    return [el for el in li if li.count(el) == 1]


# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные
# числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().


def product():
    return reduce(lambda p1, p2: p1 * p2, [i for i in range(100, 1001) if i % 2 == 0])


# 6. Реализовать два небольших скрипта:
# итератор, генерирующий целые числа, начиная с указанного;
# итератор, повторяющий элементы некоторого списка, определённого заранее. Подсказка: используйте функцию count() и
# cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Предусмотрите условие
# его завершения. #### Например, в первом задании выводим целые числа, начиная с 3. При достижении числа 10 — завершаем
# цикл. Вторым пунктом необходимо предусмотреть условие, при котором повторение элементов списка прекратится.

def int_generator(start, stop):
    generator = (el for el in count(start))
    while True:
        k = generator.__next__()
        if k <= stop:
            print(k)
        else:
            return


def cicle_list(li, counts):
    i = 0
    for el in cycle(li):
        if i > counts:
            break
        print(el)
        i += 1


# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции
# должен создаваться объект-генератор. Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение
# факториала числа. В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    value = 1
    for i in range(1, n + 1):
        value *= i
        yield value
def factorial(n):
    f = fact(n)
    for value in f:
        print(value)
