"""
1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у
пользователя, предусмотреть обработку ситуации деления на ноль.
2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия, год
рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Осуществить
вывод данных о пользователе одной строкой.
3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух
аргументов.
4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x
в степень y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции
возведения числа в степень.
Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй —
более сложная реализация без оператора **, предусматривающая использование цикла.

5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма
чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел
будет добавляться к уже подсчитанной сумме.
Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введён после
нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.
6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной
первой буквой. Например, print(int_func(‘text’)) -> Text.
7. Продолжить работу над заданием. В программу должна попадать строка из слов, разделённых пробелом. Каждое слово
состоит из латинских букв в нижнем регистре. Нужно сделать вывод исходной строки, но каждое слово должно начинаться с
заглавной буквы. Используйте написанную ранее функцию int_func().

"""


# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление. Числа запрашивать у
# пользователя, предусмотреть обработку ситуации деления на ноль.
def division():
    try:
        num1 = float(input('Please, input the first argument: '))
        num2 = float(input('Please, input the second argument: '))
    except ValueError:
        print('You must input only digits')
        return
    try:
        res = num1 / num2
    except ZeroDivisionError:
        print(f'Invalid value of divider: {num2}')
        return
    return res


# 2. Выполнить функцию, которая принимает несколько параметров, описывающих данные пользователя: имя, фамилия, год
# рождения, город проживания, email, телефон. Функция должна принимать параметры как именованные аргументы. Осуществить
# вывод данных о пользователе одной строкой.
def user(name='Ivan', surname='Ivanov', birth=2002, city='Moscow', email='ivanov@mail.ru', phone='+7499999999'):
    print(f'name: {name}, surname: {surname}, birth: {birth}, city: {city}, email: {email}, phone: {phone}')


# 3. Реализовать функцию my_func(), которая принимает три позиционных аргумента и возвращает сумму наибольших двух
# аргументов.

def my_func(a, b, c):
    li = [a, b, c]
    li.sort(reverse=True)
    return sum([li[0], li[1]])


# 4. Программа принимает действительное положительное число x и целое отрицательное число y. Выполните возведение числа x
# в степень y. Задание реализуйте в виде функции my_func(x, y). При решении задания нужно обойтись без встроенной функции
# возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в степень с помощью оператора **. Второй —
# более сложная реализация без оператора **, предусматривающая использование цикла.

def power_1(x, y):
    r = float(x)
    if not isinstance(y, int):
        print(f'Invalid type of argument y: {y}')
        return
    if r < 0:
        print('x must be > 0')
        return
    if y > 0:
        print('y must be < 0')
        return
    return r ** y


def power_2(x, y):
    r = float(x)
    if not isinstance(y, int):
        print(f'Invalid type of argument y: {y}')
        return
    if r < 0:
        print('x must be > 0')
        return
    if y > 0:
        print('y must be < 0')
        return
    res = 1 / r
    for i in range(1, abs(y)):
        res *= float(1) / r
    return res


# 5. Программа запрашивает у пользователя строку чисел, разделённых пробелом. При нажатии Enter должна выводиться сумма
# чисел. Пользователь может продолжить ввод чисел, разделённых пробелом и снова нажать Enter. Сумма вновь введённых чисел
# будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается. Если специальный символ введён после
# нескольких чисел, то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

def summa():
    s = 0
    while True:
        try:
            li = input('Введите числа: ').lower().split()
            if li.__contains__('q'):
                if li.index('q') == 0:
                    return s
                else:
                    li.remove('q')
                    li = list(map(int, li))
                    return s + sum(li)
            li = list(map(int, li))
            s += sum(li)
        except:
            print('Invalid input')
            return


# 6. Реализовать функцию int_func(), принимающую слова из маленьких латинских букв и возвращающую их же, но с прописной
# первой буквой. Например, print(int_func(‘text’)) -> Text.

def int_func(*args):
    return list(map(lambda p1: str(p1).title(), args))


